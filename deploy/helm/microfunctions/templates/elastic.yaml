#   Copyright 2020 The KNIX Authors
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: "{{ template "elastic.fullname" . }}-esconfig"
  namespace: {{ .Release.Namespace }}
  labels:
    app: "microfunctions-elasticsearch"
    release: {{ .Release.Name | quote }}
    heritage: {{ .Release.Service | quote }}
data:
  limits.conf: |-
    elasticsearch soft nofile 65536
    elasticsearch hard nofile 65536
    elasticsearch memlock unlimited
  esconfig.sh: |-
    #!/bin/sh
    set -ex
    until curl http://localhost:{{ .Values.elastic.clientPort }}/
    do 
        sleep 1
    done

    #curl -XDELETE http://localhost:{{ .Values.elastic.clientPort }}/mfnwf
    #echo "index deleted"

    curl --header "Content-Type: application/json" \
      --request PUT \
      --data '
      {
        "mappings": {
            "properties": {
                "indexed": {"type": "long"},
                "timestamp": {"type": "long"},
                "loglevel": {"type": "keyword"},
                "hostname": {"type": "keyword"},
                "containername": {"type": "keyword"},
                "uuid": {"type": "keyword"},
                "userid": {"type": "keyword"},
                "workflowname": {"type": "keyword"},
                "workflowid": {"type": "keyword"},
                "function": {"type": "keyword"},
                "asctime": {"type": "date", "format": "yyyy-MM-dd HH:mm:ss.SSS"},
                "message": {"type": "text"}
            }
        }
      }' \
      http://localhost:{{ .Values.elastic.clientPort }}/mfnwf
    echo "index created"

    curl --header "Content-Type: application/json" \
      --request PUT \
      --data '
        {
            "description": "Set a timestamp when a docuement is indexed",
            "processors": [
                {
                    "script" : {
                        "lang" : "painless",
                        "source" : "Date date = new Date();\n ctx.indexed = date.getTime();"
                    }
                }
            ]
        }' \
      http://localhost:{{ .Values.elastic.clientPort }}/_ingest/pipeline/indexed
    echo "pipeline created"
---
apiVersion: v1
kind: Service
metadata:
  name: {{ template "elastic.fullname" . }}-headless
  namespace: {{ .Release.Namespace }}
  labels:
    app: "microfunctions-elasticsearch"
    release: {{ .Release.Name | quote }}
    heritage: {{ .Release.Service | quote }}
spec:
  ports:
  - port: {{ .Values.elastic.clientPort }}
    name: serving
  - port: {{ .Values.elastic.masterPort }}
    name: node-to-node
  clusterIP: None
  selector:
    app: "microfunctions-elasticsearch"
    release: {{ .Release.Name | quote }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ template "elastic.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: "microfunctions-elasticsearch"
    release: {{ .Release.Name | quote }}
    heritage: {{ .Release.Service | quote }}
spec:
  type: ClusterIP
  ports:
  - port: {{ .Values.elastic.clientPort }}
    name: serving
  - port: {{ .Values.elastic.masterPort }}
    name: node-to-node
  selector:
    app: "microfunctions-elasticsearch"
    release: {{ .Release.Name | quote }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "elastic.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: "microfunctions-elasticsearch"
    release: {{ .Release.Name | quote }}
    heritage: {{ .Release.Service | quote }}
spec:
  serviceName: {{ template "elastic.fullname" . }}
  # NOTE: This is number of nodes that we want to run
  # you may update this
  replicas: 1
  selector:
    matchLabels:
      app: "microfunctions-elasticsearch"
      release: {{ .Release.Name | quote }}
  template:
    metadata:
      labels:
        app: "microfunctions-elasticsearch"
        release: {{ .Release.Name | quote }}
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      #initContainers:
      # NOTE:
      # This is to fix the permission on the volume
      # By default elasticsearch container is not run as
      # non root user.
      # https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html#_notes_for_production_use_and_defaults
      #- name: fix-the-volume-permission
      #  image: busybox
      #  command:
      #  - sh
      #  - -c
      #  - chown -R 1000:1000 /usr/share/elasticsearch/data
      #  securityContext:
      #    privileged: true
      #  volumeMounts:
      #  - name: data
      #    mountPath: /usr/share/elasticsearch/data
      # NOTE:
      # To increase the default vm.max_map_count to 262144
      # https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html#docker-cli-run-prod-mode
      #- name: increase-the-vm-max-map-count
      #  image: busybox
      #  command:
      #  - sysctl
      #  - -w
      #  - vm.max_map_count=262144
      #  securityContext:
      #    privileged: true
      # To increase the ulimit
      # https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html#_notes_for_production_use_and_defaults
      #- name: increase-the-ulimit
      #  image: busybox
      #  command:
      #  - sh
      #  - -c
      #  - ulimit -n 65536
      #  securityContext:
      #    privileged: true
      containers:
      - name: elasticsearch
        image: "{{ .Values.elastic.imageRepo }}{{ .Values.elastic.imagePath }}:{{ .Values.elastic.imageTag }}"
        ports:
        - containerPort: {{ .Values.elastic.clientPort }}
          name: serving
        - containerPort: {{ .Values.elastic.masterPort }}
          name: node-to-node
        resources:
{{ toYaml .Values.elastic.resources | indent 10}}
        env:
        - name: cluster.name
          value: mfn-elasticsearch
        - name: node.name
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: discovery.type
          value: single-node
        #- name: discovery.zen.ping.unicast.hosts
        #  value: es-mfn1-0.es-mfn1-headless.sand.svc.cluster.local
        - name: ES_JAVA_OPTS
          value: -Xms1g -Xmx2g
        volumeMounts:
#        - name: data
#          mountPath: /usr/share/elasticsearch/data
        - name: config
          mountPath: /esconfig
        - name: limits
          mountPath: /etc/security
        lifecycle:
          postStart:
            exec:
              command: ["/esconfig/esconfig.sh"]
      volumes:
        - name: config
          configMap:
            name: "{{ template "elastic.fullname" . }}-esconfig"
            items:
            - key: esconfig.sh
              path: esconfig.sh
              mode: 511
        - name: limits
          configMap:
            name: "{{ template "elastic.fullname" . }}-esconfig"
#  volumeClaimTemplates:
#  - metadata:
#      name: data
#    spec:
#      accessModes:
#        - ReadWriteOnce
#      resources:
#        requests:
#          storage: 10Gi
